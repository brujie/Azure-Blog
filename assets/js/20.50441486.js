(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{428:function(e,n,t){"use strict";t.r(n);var a=t(31),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"深克隆进阶处理函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深克隆进阶处理函数"}},[e._v("#")]),e._v(" 深克隆进阶处理函数")]),e._v(" "),t("p",[e._v("简单深克隆")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function clone(obj){\n\t// 创建存储容器\n    let tempObj = {};\n    for(let key in obj){\n    \t// 新属性添加到容器中\n        tempObj[key] = obj[key];\n    }\n    return tempObj;\n}\n")])])]),t("p",[e._v("递归处理多层级深克隆")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function deepClone(obj){\n    let objClone = Array.isArray(obj) ? []:{};\n    for(let key in obj){\n        // 对象并且不为空\n        if(obj != null && typeof obj === "object"){\n            // 原型链上的方法\n            if(obj.hasOwnProperty(key)){\n                // 判断是否存在下级\n                if(obj[key] && typeof obj[key] === "object"){\n                objClone[key] = deepClone(obj[key]);\n                } else {\n                objClone[key] = obj[key];\n                }\n            }\n        }\n    }\n    return objClone;\n}\n')])])]),t("p",[e._v("解决循环引用深克隆")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function deepCloneMap(target,map = new Map()){\n    if(target !== null && typeof target === 'object'){\n        const isArray = Array.isArray(target);\n        let result = isArray ? [] : {}; // 动态生成容器\n        // 检测是否存在对应值\n        if(map.get(target)){\n            return;\n        }\n        // map设置值\n        map.set(target,result);\n        if(isArray){\n            target.forEach(item,index => {\n                result[index] = deepCloneMap(item,map);\n            });\n        } else {\n            Object.keys(target).forEach(key =>{\n                result[key] = deepCloneMap(target[key],map);\n            })\n        }\n    } else {\n        // 其他类型直接返回\n        return target;\n    }\n}\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);